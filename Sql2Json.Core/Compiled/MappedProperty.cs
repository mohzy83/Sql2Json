using Newtonsoft.Json;

namespace Sql2Json.Core.Compiled
{
    /// <summary>
    /// Mapped Property which contains the information which property should be outputted with which value
    /// </summary>
    public class MappedProperty
    {
        /// <summary>
        /// Mapped Property with the specified name will get its value from a column
        /// </summary>
        /// <param name="targetPropertyName">Name of the target property</param>
        /// <param name="columnName">Column name for the value</param>
        public MappedProperty(string targetPropertyName, string columnName)
        {
            TargetPropertyName = targetPropertyName;
            ColumnName = columnName;
        }

        /// <summary>
        ///  Mapped Property with the specified name will contain the provided object
        /// </summary>
        /// <param name="targetPropertyName">Name of the target property</param>
        /// <param name="mappedObject">child Object</param>
        public MappedProperty(string targetPropertyName, MappedObject mappedObject)
        {
            TargetPropertyName = targetPropertyName;
            MappedObject = mappedObject;
        }

        /// <summary>
        /// Mapped Property with the specified name will get its value from a custom value resolver <see cref="ICustomValueResolver"/>
        /// </summary>
        /// <param name="targetPropertyName">Name of the traget property</param>
        /// <param name="valueResolver">Implementation of <see cref="ICustomValueResolver"/></param>
        public MappedProperty(string targetPropertyName, MappedValueResolver valueResolver)
        {
            TargetPropertyName = targetPropertyName;
            ValueResolver = valueResolver;
        }

        /// <summary>
        /// Mapped Property with the specified name, with a static value
        /// </summary>
        /// <param name="targetPropertyName">Name of the traget property</param>
        /// <param name="staticValue">static value for target property</param>
        public MappedProperty(string targetPropertyName, object staticValue)
        {
            TargetPropertyName = targetPropertyName;
            StaticValue = staticValue;
        }

        /// <summary>
        /// Mapped Property with the specified name will contain a list of child objects
        /// The child object are generated by the provided standard query <see cref="MappedQuery"/>
        /// </summary>
        /// <param name="targetPropertyName">Name of the traget property</param>
        /// <param name="mappedQuery">query which will generate child objects</param>
        public MappedProperty(string targetPropertyName, MappedQuery mappedQuery)
        {
            TargetPropertyName = targetPropertyName;
            MappedQuery = mappedQuery;
        }

        /// <summary>
        /// Mapped Property with the specified name will contain a list of child objects
        /// The child object are generated by the provided query with nested results <see cref="MappedQueryWithNestedResults"/>
        /// </summary>
        /// <param name="targetPropertyName">Name of the traget property</param>
        /// <param name="mappedQueryWithNestedResults">query which will generate child objects</param>
        public MappedProperty(string targetPropertyName, MappedQueryWithNestedResults mappedQueryWithNestedResults)
        {
            TargetPropertyName = targetPropertyName;
            MappedQueryWithNestedResults = mappedQueryWithNestedResults;
        }

        /// <summary>
        /// Mapped Property with the specified name will contain a list of child objects
        /// The child objects are defined by the mappedGroup
        /// </summary>
        /// <param name="targetPropertyName">Name of the traget property</param>
        /// <param name="mappedGroup">group</param>
        public MappedProperty(string targetPropertyName, MappedNestedResults mappedGroup)
        {
            TargetPropertyName = targetPropertyName;
            MappedNestedResults = mappedGroup;
        }

        [JsonConstructor]
        internal MappedProperty(string targetPropertyName, MappedQuery mappedQuery, string columnName, object staticValue, MappedObject mappedObject, MappedNestedResults mappedGroup, MappedValueResolver valueResolver, MappedQueryWithNestedResults mappedQueryWithNestedResults)
        {
            TargetPropertyName = targetPropertyName;
            MappedQuery = mappedQuery;
            StaticValue = staticValue;
            ColumnName = columnName;
            MappedObject = mappedObject;
            MappedNestedResults = mappedGroup;
            ValueResolver = valueResolver;
            MappedQueryWithNestedResults = mappedQueryWithNestedResults;
        }

        /// <summary>
        /// Name of the target property
        /// </summary>
        public string TargetPropertyName { get; }        
        /// <summary>
        /// Column name for the value
        /// </summary>
        public string ColumnName { get; }
        /// <summary>
        /// Static value for the property
        /// </summary>
        public object StaticValue { get; }
        /// <summary>
        /// Custom value resolver 
        /// </summary>
        public MappedValueResolver ValueResolver { get; }
        /// <summary>
        /// Standard Query to resolver child objects
        /// </summary>
        public MappedQuery MappedQuery { get; }
        /// <summary>
        /// Query with nested results to resolve child objects
        /// </summary>
        public MappedQueryWithNestedResults MappedQueryWithNestedResults { get; }
        /// <summary>
        /// Static child object
        /// </summary>
        public MappedObject MappedObject { get; }
        /// <summary>
        /// Child objects from nested results
        /// </summary>
        public MappedNestedResults MappedNestedResults { get; }

        /// <summary>
        /// Gets the specified Columnname or simply the Property Name
        /// </summary>
        /// <returns></returns>
        public string GetColumnNameOrPropertyName()
        {
            return ColumnName != null ? ColumnName : TargetPropertyName;
        }
        /// <summary>
        /// Return the actual query
        /// </summary>
        /// <returns></returns>
        public MappedQuery GetValidQuery()
        {
            return MappedQuery != null ? MappedQuery : MappedQueryWithNestedResults;
        }
    }
}
